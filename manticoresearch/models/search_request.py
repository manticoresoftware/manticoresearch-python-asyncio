# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class SearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table: str=None, query: SearchQuery=None, join: List[Join]=None, highlight: Highlight=None, limit: int=None, knn: KnnQuery=None, aggs: Dict[str, Aggregation]=None, expressions: Dict[str, str]=None, max_matches: int=None, offset: int=None, options: object=None, profile: bool=None, sort: object=None, source: object=None, track_scores: bool=None):
        """SearchRequest - a model defined in OpenAPI

        :param table: The table of this SearchRequest.
        :param query: The query of this SearchRequest.
        :param join: The join of this SearchRequest.
        :param highlight: The highlight of this SearchRequest.
        :param limit: The limit of this SearchRequest.
        :param knn: The knn of this SearchRequest.
        :param aggs: The aggs of this SearchRequest.
        :param expressions: The expressions of this SearchRequest.
        :param max_matches: The max_matches of this SearchRequest.
        :param offset: The offset of this SearchRequest.
        :param options: The options of this SearchRequest.
        :param profile: The profile of this SearchRequest.
        :param sort: The sort of this SearchRequest.
        :param source: The source of this SearchRequest.
        :param track_scores: The track_scores of this SearchRequest.
        """
        self.openapi_types = {
            'table': str,
            'query': SearchQuery,
            'join': List[Join],
            'highlight': Highlight,
            'limit': int,
            'knn': KnnQuery,
            'aggs': Dict[str, Aggregation],
            'expressions': Dict[str, str],
            'max_matches': int,
            'offset': int,
            'options': object,
            'profile': bool,
            'sort': object,
            'source': object,
            'track_scores': bool
        }

        self.attribute_map = {
            'table': 'table',
            'query': 'query',
            'join': 'join',
            'highlight': 'highlight',
            'limit': 'limit',
            'knn': 'knn',
            'aggs': 'aggs',
            'expressions': 'expressions',
            'max_matches': 'max_matches',
            'offset': 'offset',
            'options': 'options',
            'profile': 'profile',
            'sort': 'sort',
            'source': '_source',
            'track_scores': 'track_scores'
        }

        self._table = table
        self._query = query
        self._join = join
        self._highlight = highlight
        self._limit = limit
        self._knn = knn
        self._aggs = aggs
        self._expressions = expressions
        self._max_matches = max_matches
        self._offset = offset
        self._options = options
        self._profile = profile
        self._sort = sort
        self._source = source
        self._track_scores = track_scores

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchRequest of this SearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table(self):
        """Gets the table of this SearchRequest.

        The table to perform the search on

        :return: The table of this SearchRequest.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this SearchRequest.

        The table to perform the search on

        :param table: The table of this SearchRequest.
        :type table: str
        """
        if table is None:
            raise ValueError("Invalid value for `table`, must not be `None`")

        self._table = table

    @property
    def query(self):
        """Gets the query of this SearchRequest.


        :return: The query of this SearchRequest.
        :rtype: SearchQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchRequest.


        :param query: The query of this SearchRequest.
        :type query: SearchQuery
        """

        self._query = query

    @property
    def join(self):
        """Gets the join of this SearchRequest.

        Join clause to combine search data from multiple tables

        :return: The join of this SearchRequest.
        :rtype: List[Join]
        """
        return self._join

    @join.setter
    def join(self, join):
        """Sets the join of this SearchRequest.

        Join clause to combine search data from multiple tables

        :param join: The join of this SearchRequest.
        :type join: List[Join]
        """

        self._join = join

    @property
    def highlight(self):
        """Gets the highlight of this SearchRequest.


        :return: The highlight of this SearchRequest.
        :rtype: Highlight
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this SearchRequest.


        :param highlight: The highlight of this SearchRequest.
        :type highlight: Highlight
        """

        self._highlight = highlight

    @property
    def limit(self):
        """Gets the limit of this SearchRequest.

        Maximum number of results to return

        :return: The limit of this SearchRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchRequest.

        Maximum number of results to return

        :param limit: The limit of this SearchRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def knn(self):
        """Gets the knn of this SearchRequest.


        :return: The knn of this SearchRequest.
        :rtype: KnnQuery
        """
        return self._knn

    @knn.setter
    def knn(self, knn):
        """Sets the knn of this SearchRequest.


        :param knn: The knn of this SearchRequest.
        :type knn: KnnQuery
        """

        self._knn = knn

    @property
    def aggs(self):
        """Gets the aggs of this SearchRequest.

        Defines aggregation settings for grouping results

        :return: The aggs of this SearchRequest.
        :rtype: Dict[str, Aggregation]
        """
        return self._aggs

    @aggs.setter
    def aggs(self, aggs):
        """Sets the aggs of this SearchRequest.

        Defines aggregation settings for grouping results

        :param aggs: The aggs of this SearchRequest.
        :type aggs: Dict[str, Aggregation]
        """

        self._aggs = aggs

    @property
    def expressions(self):
        """Gets the expressions of this SearchRequest.

        Expressions to calculate additional values for the result

        :return: The expressions of this SearchRequest.
        :rtype: Dict[str, str]
        """
        return self._expressions

    @expressions.setter
    def expressions(self, expressions):
        """Sets the expressions of this SearchRequest.

        Expressions to calculate additional values for the result

        :param expressions: The expressions of this SearchRequest.
        :type expressions: Dict[str, str]
        """

        self._expressions = expressions

    @property
    def max_matches(self):
        """Gets the max_matches of this SearchRequest.

        Maximum number of matches allowed in the result

        :return: The max_matches of this SearchRequest.
        :rtype: int
        """
        return self._max_matches

    @max_matches.setter
    def max_matches(self, max_matches):
        """Sets the max_matches of this SearchRequest.

        Maximum number of matches allowed in the result

        :param max_matches: The max_matches of this SearchRequest.
        :type max_matches: int
        """

        self._max_matches = max_matches

    @property
    def offset(self):
        """Gets the offset of this SearchRequest.

        Starting point for pagination of the result

        :return: The offset of this SearchRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchRequest.

        Starting point for pagination of the result

        :param offset: The offset of this SearchRequest.
        :type offset: int
        """

        self._offset = offset

    @property
    def options(self):
        """Gets the options of this SearchRequest.

        Additional search options

        :return: The options of this SearchRequest.
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this SearchRequest.

        Additional search options

        :param options: The options of this SearchRequest.
        :type options: object
        """

        self._options = options

    @property
    def profile(self):
        """Gets the profile of this SearchRequest.

        Enable or disable profiling of the search request

        :return: The profile of this SearchRequest.
        :rtype: bool
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this SearchRequest.

        Enable or disable profiling of the search request

        :param profile: The profile of this SearchRequest.
        :type profile: bool
        """

        self._profile = profile

    @property
    def sort(self):
        """Gets the sort of this SearchRequest.


        :return: The sort of this SearchRequest.
        :rtype: object
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchRequest.


        :param sort: The sort of this SearchRequest.
        :type sort: object
        """

        self._sort = sort

    @property
    def source(self):
        """Gets the source of this SearchRequest.


        :return: The source of this SearchRequest.
        :rtype: object
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SearchRequest.


        :param source: The source of this SearchRequest.
        :type source: object
        """

        self._source = source

    @property
    def track_scores(self):
        """Gets the track_scores of this SearchRequest.

        Enable or disable result weight calculation used for sorting

        :return: The track_scores of this SearchRequest.
        :rtype: bool
        """
        return self._track_scores

    @track_scores.setter
    def track_scores(self, track_scores):
        """Sets the track_scores of this SearchRequest.

        Enable or disable result weight calculation used for sorting

        :param track_scores: The track_scores of this SearchRequest.
        :type track_scores: bool
        """

        self._track_scores = track_scores
