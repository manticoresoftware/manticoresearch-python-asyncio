# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class AggComposite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, size: int=None, sources: List[Dict[str, AggCompositeSource]]=None):
        """AggComposite - a model defined in OpenAPI

        :param size: The size of this AggComposite.
        :param sources: The sources of this AggComposite.
        """
        self.openapi_types = {
            'size': int,
            'sources': List[Dict[str, AggCompositeSource]]
        }

        self.attribute_map = {
            'size': 'size',
            'sources': 'sources'
        }

        self._size = size
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggComposite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The aggComposite of this AggComposite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def size(self):
        """Gets the size of this AggComposite.

        Maximum number of composite buckets in the result

        :return: The size of this AggComposite.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this AggComposite.

        Maximum number of composite buckets in the result

        :param size: The size of this AggComposite.
        :type size: int
        """

        self._size = size

    @property
    def sources(self):
        """Gets the sources of this AggComposite.


        :return: The sources of this AggComposite.
        :rtype: List[Dict[str, AggCompositeSource]]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this AggComposite.


        :param sources: The sources of this AggComposite.
        :type sources: List[Dict[str, AggCompositeSource]]
        """

        self._sources = sources
