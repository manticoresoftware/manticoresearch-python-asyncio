# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class KnnQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field: str=None, k: int=None, query_vector: List[float]=None, doc_id: int=None, ef: int=None, filter: QueryFilter=None):
        """KnnQuery - a model defined in OpenAPI

        :param field: The field of this KnnQuery.
        :param k: The k of this KnnQuery.
        :param query_vector: The query_vector of this KnnQuery.
        :param doc_id: The doc_id of this KnnQuery.
        :param ef: The ef of this KnnQuery.
        :param filter: The filter of this KnnQuery.
        """
        self.openapi_types = {
            'field': str,
            'k': int,
            'query_vector': List[float],
            'doc_id': int,
            'ef': int,
            'filter': QueryFilter
        }

        self.attribute_map = {
            'field': 'field',
            'k': 'k',
            'query_vector': 'query_vector',
            'doc_id': 'doc_id',
            'ef': 'ef',
            'filter': 'filter'
        }

        self._field = field
        self._k = k
        self._query_vector = query_vector
        self._doc_id = doc_id
        self._ef = ef
        self._filter = filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KnnQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The knnQuery of this KnnQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field(self):
        """Gets the field of this KnnQuery.

        Field to perform the k-nearest neighbor search on

        :return: The field of this KnnQuery.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this KnnQuery.

        Field to perform the k-nearest neighbor search on

        :param field: The field of this KnnQuery.
        :type field: str
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")

        self._field = field

    @property
    def k(self):
        """Gets the k of this KnnQuery.

        The number of nearest neighbors to return

        :return: The k of this KnnQuery.
        :rtype: int
        """
        return self._k

    @k.setter
    def k(self, k):
        """Sets the k of this KnnQuery.

        The number of nearest neighbors to return

        :param k: The k of this KnnQuery.
        :type k: int
        """
        if k is None:
            raise ValueError("Invalid value for `k`, must not be `None`")

        self._k = k

    @property
    def query_vector(self):
        """Gets the query_vector of this KnnQuery.

        The vector used as input for the KNN search

        :return: The query_vector of this KnnQuery.
        :rtype: List[float]
        """
        return self._query_vector

    @query_vector.setter
    def query_vector(self, query_vector):
        """Sets the query_vector of this KnnQuery.

        The vector used as input for the KNN search

        :param query_vector: The query_vector of this KnnQuery.
        :type query_vector: List[float]
        """

        self._query_vector = query_vector

    @property
    def doc_id(self):
        """Gets the doc_id of this KnnQuery.

        The docuemnt ID used as input for the KNN search

        :return: The doc_id of this KnnQuery.
        :rtype: int
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this KnnQuery.

        The docuemnt ID used as input for the KNN search

        :param doc_id: The doc_id of this KnnQuery.
        :type doc_id: int
        """

        self._doc_id = doc_id

    @property
    def ef(self):
        """Gets the ef of this KnnQuery.

        Optional parameter controlling the accuracy of the search

        :return: The ef of this KnnQuery.
        :rtype: int
        """
        return self._ef

    @ef.setter
    def ef(self, ef):
        """Sets the ef of this KnnQuery.

        Optional parameter controlling the accuracy of the search

        :param ef: The ef of this KnnQuery.
        :type ef: int
        """

        self._ef = ef

    @property
    def filter(self):
        """Gets the filter of this KnnQuery.


        :return: The filter of this KnnQuery.
        :rtype: QueryFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this KnnQuery.


        :param filter: The filter of this KnnQuery.
        :type filter: QueryFilter
        """

        self._filter = filter
