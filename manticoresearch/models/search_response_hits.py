# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class SearchResponseHits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_score: int=None, total: int=None, total_relation: str=None, hits: List[HitsHits]=None):
        """SearchResponseHits - a model defined in OpenAPI

        :param max_score: The max_score of this SearchResponseHits.
        :param total: The total of this SearchResponseHits.
        :param total_relation: The total_relation of this SearchResponseHits.
        :param hits: The hits of this SearchResponseHits.
        """
        self.openapi_types = {
            'max_score': int,
            'total': int,
            'total_relation': str,
            'hits': List[HitsHits]
        }

        self.attribute_map = {
            'max_score': 'max_score',
            'total': 'total',
            'total_relation': 'total_relation',
            'hits': 'hits'
        }

        self._max_score = max_score
        self._total = total
        self._total_relation = total_relation
        self._hits = hits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResponseHits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchResponse_hits of this SearchResponseHits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_score(self):
        """Gets the max_score of this SearchResponseHits.

        Maximum score among the matched documents

        :return: The max_score of this SearchResponseHits.
        :rtype: int
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this SearchResponseHits.

        Maximum score among the matched documents

        :param max_score: The max_score of this SearchResponseHits.
        :type max_score: int
        """

        self._max_score = max_score

    @property
    def total(self):
        """Gets the total of this SearchResponseHits.

        Total number of matched documents

        :return: The total of this SearchResponseHits.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SearchResponseHits.

        Total number of matched documents

        :param total: The total of this SearchResponseHits.
        :type total: int
        """

        self._total = total

    @property
    def total_relation(self):
        """Gets the total_relation of this SearchResponseHits.

        Indicates whether the total number of hits is accurate or an estimate

        :return: The total_relation of this SearchResponseHits.
        :rtype: str
        """
        return self._total_relation

    @total_relation.setter
    def total_relation(self, total_relation):
        """Sets the total_relation of this SearchResponseHits.

        Indicates whether the total number of hits is accurate or an estimate

        :param total_relation: The total_relation of this SearchResponseHits.
        :type total_relation: str
        """

        self._total_relation = total_relation

    @property
    def hits(self):
        """Gets the hits of this SearchResponseHits.

        Array of hit objects, each representing a matched document

        :return: The hits of this SearchResponseHits.
        :rtype: List[HitsHits]
        """
        return self._hits

    @hits.setter
    def hits(self, hits):
        """Sets the hits of this SearchResponseHits.

        Array of hit objects, each representing a matched document

        :param hits: The hits of this SearchResponseHits.
        :type hits: List[HitsHits]
        """

        self._hits = hits
