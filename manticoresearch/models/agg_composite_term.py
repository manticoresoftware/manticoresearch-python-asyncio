# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class AggCompositeTerm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field: str=None):
        """AggCompositeTerm - a model defined in OpenAPI

        :param field: The field of this AggCompositeTerm.
        """
        self.openapi_types = {
            'field': str
        }

        self.attribute_map = {
            'field': 'field'
        }

        self._field = field

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggCompositeTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The aggCompositeTerm of this AggCompositeTerm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field(self):
        """Gets the field of this AggCompositeTerm.

        Name of field to operate with

        :return: The field of this AggCompositeTerm.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this AggCompositeTerm.

        Name of field to operate with

        :param field: The field of this AggCompositeTerm.
        :type field: str
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")

        self._field = field
