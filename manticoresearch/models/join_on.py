# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class JoinOn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, right: JoinCond=None, left: JoinCond=None, operator: str=None):
        """JoinOn - a model defined in OpenAPI

        :param right: The right of this JoinOn.
        :param left: The left of this JoinOn.
        :param operator: The operator of this JoinOn.
        """
        self.openapi_types = {
            'right': JoinCond,
            'left': JoinCond,
            'operator': str
        }

        self.attribute_map = {
            'right': 'right',
            'left': 'left',
            'operator': 'operator'
        }

        self._right = right
        self._left = left
        self._operator = operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JoinOn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The joinOn of this JoinOn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def right(self):
        """Gets the right of this JoinOn.


        :return: The right of this JoinOn.
        :rtype: JoinCond
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this JoinOn.


        :param right: The right of this JoinOn.
        :type right: JoinCond
        """

        self._right = right

    @property
    def left(self):
        """Gets the left of this JoinOn.


        :return: The left of this JoinOn.
        :rtype: JoinCond
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this JoinOn.


        :param left: The left of this JoinOn.
        :type left: JoinCond
        """

        self._left = left

    @property
    def operator(self):
        """Gets the operator of this JoinOn.


        :return: The operator of this JoinOn.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this JoinOn.


        :param operator: The operator of this JoinOn.
        :type operator: str
        """
        allowed_values = ["eq"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator
