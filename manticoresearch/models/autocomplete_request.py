# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class AutocompleteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table: str=None, query: str=None, options: object=None):
        """AutocompleteRequest - a model defined in OpenAPI

        :param table: The table of this AutocompleteRequest.
        :param query: The query of this AutocompleteRequest.
        :param options: The options of this AutocompleteRequest.
        """
        self.openapi_types = {
            'table': str,
            'query': str,
            'options': object
        }

        self.attribute_map = {
            'table': 'table',
            'query': 'query',
            'options': 'options'
        }

        self._table = table
        self._query = query
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutocompleteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The autocompleteRequest of this AutocompleteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table(self):
        """Gets the table of this AutocompleteRequest.

        The table to perform the search on

        :return: The table of this AutocompleteRequest.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this AutocompleteRequest.

        The table to perform the search on

        :param table: The table of this AutocompleteRequest.
        :type table: str
        """
        if table is None:
            raise ValueError("Invalid value for `table`, must not be `None`")

        self._table = table

    @property
    def query(self):
        """Gets the query of this AutocompleteRequest.

        The beginning of the string to autocomplete

        :return: The query of this AutocompleteRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this AutocompleteRequest.

        The beginning of the string to autocomplete

        :param query: The query of this AutocompleteRequest.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def options(self):
        """Gets the options of this AutocompleteRequest.

        Autocomplete options   - layouts: A comma-separated string of keyboard layout codes to validate and check for spell correction. Available options - us, ru, ua, se, pt, no, it, gr, uk, fr, es, dk, de, ch, br, bg, be. By default, all are enabled.   - fuzziness: (0,1 or 2) Maximum Levenshtein distance for finding typos. Set to 0 to disable fuzzy matching. Default is 2   - prepend: true/false If true, adds an asterisk before the last word for prefix expansion (e.g., *word )   - append:  true/false If true, adds an asterisk after the last word for prefix expansion (e.g., word* )   - expansion_len: Number of characters to expand in the last word. Default is 10. 

        :return: The options of this AutocompleteRequest.
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this AutocompleteRequest.

        Autocomplete options   - layouts: A comma-separated string of keyboard layout codes to validate and check for spell correction. Available options - us, ru, ua, se, pt, no, it, gr, uk, fr, es, dk, de, ch, br, bg, be. By default, all are enabled.   - fuzziness: (0,1 or 2) Maximum Levenshtein distance for finding typos. Set to 0 to disable fuzzy matching. Default is 2   - prepend: true/false If true, adds an asterisk before the last word for prefix expansion (e.g., *word )   - append:  true/false If true, adds an asterisk after the last word for prefix expansion (e.g., word* )   - expansion_len: Number of characters to expand in the last word. Default is 10. 

        :param options: The options of this AutocompleteRequest.
        :type options: object
        """

        self._options = options
