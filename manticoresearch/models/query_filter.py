# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class QueryFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query_string: object=None, match: object=None, match_phrase: object=None, match_all: object=None, bool: BoolFilter=None, equals: object=None, var_in: object=None, range: object=None, geo_distance: GeoDistance=None):
        """QueryFilter - a model defined in OpenAPI

        :param query_string: The query_string of this QueryFilter.
        :param match: The match of this QueryFilter.
        :param match_phrase: The match_phrase of this QueryFilter.
        :param match_all: The match_all of this QueryFilter.
        :param bool: The bool of this QueryFilter.
        :param equals: The equals of this QueryFilter.
        :param var_in: The var_in of this QueryFilter.
        :param range: The range of this QueryFilter.
        :param geo_distance: The geo_distance of this QueryFilter.
        """
        self.openapi_types = {
            'query_string': object,
            'match': object,
            'match_phrase': object,
            'match_all': object,
            'bool': BoolFilter,
            'equals': object,
            'var_in': object,
            'range': object,
            'geo_distance': GeoDistance
        }

        self.attribute_map = {
            'query_string': 'query_string',
            'match': 'match',
            'match_phrase': 'match_phrase',
            'match_all': 'match_all',
            'bool': 'bool',
            'equals': 'equals',
            'var_in': 'in',
            'range': 'range',
            'geo_distance': 'geo_distance'
        }

        self._query_string = query_string
        self._match = match
        self._match_phrase = match_phrase
        self._match_all = match_all
        self._bool = bool
        self._equals = equals
        self._var_in = var_in
        self._range = range
        self._geo_distance = geo_distance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The queryFilter of this QueryFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query_string(self):
        """Gets the query_string of this QueryFilter.

        Filter object defining a query string

        :return: The query_string of this QueryFilter.
        :rtype: object
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this QueryFilter.

        Filter object defining a query string

        :param query_string: The query_string of this QueryFilter.
        :type query_string: object
        """

        self._query_string = query_string

    @property
    def match(self):
        """Gets the match of this QueryFilter.

        Filter object defining a match keyword passed as a string or in a Match object

        :return: The match of this QueryFilter.
        :rtype: object
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this QueryFilter.

        Filter object defining a match keyword passed as a string or in a Match object

        :param match: The match of this QueryFilter.
        :type match: object
        """

        self._match = match

    @property
    def match_phrase(self):
        """Gets the match_phrase of this QueryFilter.

        Filter object defining a match phrase

        :return: The match_phrase of this QueryFilter.
        :rtype: object
        """
        return self._match_phrase

    @match_phrase.setter
    def match_phrase(self, match_phrase):
        """Sets the match_phrase of this QueryFilter.

        Filter object defining a match phrase

        :param match_phrase: The match_phrase of this QueryFilter.
        :type match_phrase: object
        """

        self._match_phrase = match_phrase

    @property
    def match_all(self):
        """Gets the match_all of this QueryFilter.

        Filter object to select all documents

        :return: The match_all of this QueryFilter.
        :rtype: object
        """
        return self._match_all

    @match_all.setter
    def match_all(self, match_all):
        """Sets the match_all of this QueryFilter.

        Filter object to select all documents

        :param match_all: The match_all of this QueryFilter.
        :type match_all: object
        """

        self._match_all = match_all

    @property
    def bool(self):
        """Gets the bool of this QueryFilter.


        :return: The bool of this QueryFilter.
        :rtype: BoolFilter
        """
        return self._bool

    @bool.setter
    def bool(self, bool):
        """Sets the bool of this QueryFilter.


        :param bool: The bool of this QueryFilter.
        :type bool: BoolFilter
        """

        self._bool = bool

    @property
    def equals(self):
        """Gets the equals of this QueryFilter.


        :return: The equals of this QueryFilter.
        :rtype: object
        """
        return self._equals

    @equals.setter
    def equals(self, equals):
        """Sets the equals of this QueryFilter.


        :param equals: The equals of this QueryFilter.
        :type equals: object
        """

        self._equals = equals

    @property
    def var_in(self):
        """Gets the var_in of this QueryFilter.

        Filter to match a given set of attribute values.

        :return: The var_in of this QueryFilter.
        :rtype: object
        """
        return self._var_in

    @var_in.setter
    def var_in(self, var_in):
        """Sets the var_in of this QueryFilter.

        Filter to match a given set of attribute values.

        :param var_in: The var_in of this QueryFilter.
        :type var_in: object
        """

        self._var_in = var_in

    @property
    def range(self):
        """Gets the range of this QueryFilter.

        Filter to match a given range of attribute values passed in Range objects

        :return: The range of this QueryFilter.
        :rtype: object
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this QueryFilter.

        Filter to match a given range of attribute values passed in Range objects

        :param range: The range of this QueryFilter.
        :type range: object
        """

        self._range = range

    @property
    def geo_distance(self):
        """Gets the geo_distance of this QueryFilter.


        :return: The geo_distance of this QueryFilter.
        :rtype: GeoDistance
        """
        return self._geo_distance

    @geo_distance.setter
    def geo_distance(self, geo_distance):
        """Sets the geo_distance of this QueryFilter.


        :param geo_distance: The geo_distance of this QueryFilter.
        :type geo_distance: GeoDistance
        """

        self._geo_distance = geo_distance
