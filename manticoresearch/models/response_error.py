# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class ResponseError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: object=None, reason: object=None, table: object=None):
        """ResponseError - a model defined in OpenAPI

        :param type: The type of this ResponseError.
        :param reason: The reason of this ResponseError.
        :param table: The table of this ResponseError.
        """
        self.openapi_types = {
            'type': object,
            'reason': object,
            'table': object
        }

        self.attribute_map = {
            'type': 'type',
            'reason': 'reason',
            'table': 'table'
        }

        self._type = type
        self._reason = reason
        self._table = table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The responseError of this ResponseError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ResponseError.

        Type or category of the error

        :return: The type of this ResponseError.
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseError.

        Type or category of the error

        :param type: The type of this ResponseError.
        :type type: object
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def reason(self):
        """Gets the reason of this ResponseError.

        Detailed explanation of why the error occurred

        :return: The reason of this ResponseError.
        :rtype: object
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ResponseError.

        Detailed explanation of why the error occurred

        :param reason: The reason of this ResponseError.
        :type reason: object
        """

        self._reason = reason

    @property
    def table(self):
        """Gets the table of this ResponseError.

        The table related to the error, if applicable

        :return: The table of this ResponseError.
        :rtype: object
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this ResponseError.

        The table related to the error, if applicable

        :param table: The table of this ResponseError.
        :type table: object
        """

        self._table = table
