# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class SuccessResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, table: str=None, id: int=None, created: bool=None, result: str=None, found: bool=None, status: int=None):
        """SuccessResponse - a model defined in OpenAPI

        :param table: The table of this SuccessResponse.
        :param id: The id of this SuccessResponse.
        :param created: The created of this SuccessResponse.
        :param result: The result of this SuccessResponse.
        :param found: The found of this SuccessResponse.
        :param status: The status of this SuccessResponse.
        """
        self.openapi_types = {
            'table': str,
            'id': int,
            'created': bool,
            'result': str,
            'found': bool,
            'status': int
        }

        self.attribute_map = {
            'table': 'table',
            'id': 'id',
            'created': 'created',
            'result': 'result',
            'found': 'found',
            'status': 'status'
        }

        self._table = table
        self._id = id
        self._created = created
        self._result = result
        self._found = found
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuccessResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The successResponse of this SuccessResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def table(self):
        """Gets the table of this SuccessResponse.

        Name of the document table

        :return: The table of this SuccessResponse.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this SuccessResponse.

        Name of the document table

        :param table: The table of this SuccessResponse.
        :type table: str
        """

        self._table = table

    @property
    def id(self):
        """Gets the id of this SuccessResponse.

        ID of the document affected by the request operation

        :return: The id of this SuccessResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SuccessResponse.

        ID of the document affected by the request operation

        :param id: The id of this SuccessResponse.
        :type id: int
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this SuccessResponse.

        Indicates whether the document was created as a result of the operation

        :return: The created of this SuccessResponse.
        :rtype: bool
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SuccessResponse.

        Indicates whether the document was created as a result of the operation

        :param created: The created of this SuccessResponse.
        :type created: bool
        """

        self._created = created

    @property
    def result(self):
        """Gets the result of this SuccessResponse.

        Result of the operation, typically 'created', 'updated', or 'deleted'

        :return: The result of this SuccessResponse.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this SuccessResponse.

        Result of the operation, typically 'created', 'updated', or 'deleted'

        :param result: The result of this SuccessResponse.
        :type result: str
        """

        self._result = result

    @property
    def found(self):
        """Gets the found of this SuccessResponse.

        Indicates whether the document was found in the table

        :return: The found of this SuccessResponse.
        :rtype: bool
        """
        return self._found

    @found.setter
    def found(self, found):
        """Sets the found of this SuccessResponse.

        Indicates whether the document was found in the table

        :param found: The found of this SuccessResponse.
        :type found: bool
        """

        self._found = found

    @property
    def status(self):
        """Gets the status of this SuccessResponse.

        HTTP status code representing the result of the operation

        :return: The status of this SuccessResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SuccessResponse.

        HTTP status code representing the result of the operation

        :param status: The status of this SuccessResponse.
        :type status: int
        """

        self._status = status
