# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class Aggregation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, terms: AggTerms=None, sort: List[object]=None, composite: AggComposite=None):
        """Aggregation - a model defined in OpenAPI

        :param terms: The terms of this Aggregation.
        :param sort: The sort of this Aggregation.
        :param composite: The composite of this Aggregation.
        """
        self.openapi_types = {
            'terms': AggTerms,
            'sort': List[object],
            'composite': AggComposite
        }

        self.attribute_map = {
            'terms': 'terms',
            'sort': 'sort',
            'composite': 'composite'
        }

        self._terms = terms
        self._sort = sort
        self._composite = composite

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Aggregation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The aggregation of this Aggregation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def terms(self):
        """Gets the terms of this Aggregation.


        :return: The terms of this Aggregation.
        :rtype: AggTerms
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this Aggregation.


        :param terms: The terms of this Aggregation.
        :type terms: AggTerms
        """

        self._terms = terms

    @property
    def sort(self):
        """Gets the sort of this Aggregation.


        :return: The sort of this Aggregation.
        :rtype: List[object]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Aggregation.


        :param sort: The sort of this Aggregation.
        :type sort: List[object]
        """

        self._sort = sort

    @property
    def composite(self):
        """Gets the composite of this Aggregation.


        :return: The composite of this Aggregation.
        :rtype: AggComposite
        """
        return self._composite

    @composite.setter
    def composite(self, composite):
        """Sets the composite of this Aggregation.


        :param composite: The composite of this Aggregation.
        :type composite: AggComposite
        """

        self._composite = composite
