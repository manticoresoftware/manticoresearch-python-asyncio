# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class Match(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query: str=None, operator: str=None, boost: float=None):
        """Match - a model defined in OpenAPI

        :param query: The query of this Match.
        :param operator: The operator of this Match.
        :param boost: The boost of this Match.
        """
        self.openapi_types = {
            'query': str,
            'operator': str,
            'boost': float
        }

        self.attribute_map = {
            'query': 'query',
            'operator': 'operator',
            'boost': 'boost'
        }

        self._query = query
        self._operator = operator
        self._boost = boost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Match':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _match of this Match.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query(self):
        """Gets the query of this Match.


        :return: The query of this Match.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Match.


        :param query: The query of this Match.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def operator(self):
        """Gets the operator of this Match.


        :return: The operator of this Match.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Match.


        :param operator: The operator of this Match.
        :type operator: str
        """
        allowed_values = ["or", "and"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def boost(self):
        """Gets the boost of this Match.


        :return: The boost of this Match.
        :rtype: float
        """
        return self._boost

    @boost.setter
    def boost(self, boost):
        """Sets the boost of this Match.


        :param boost: The boost of this Match.
        :type boost: float
        """

        self._boost = boost
