# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class Join(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, on: List[JoinOn]=None, query: FulltextFilter=None, table: str=None):
        """Join - a model defined in OpenAPI

        :param type: The type of this Join.
        :param on: The on of this Join.
        :param query: The query of this Join.
        :param table: The table of this Join.
        """
        self.openapi_types = {
            'type': str,
            'on': List[JoinOn],
            'query': FulltextFilter,
            'table': str
        }

        self.attribute_map = {
            'type': 'type',
            'on': 'on',
            'query': 'query',
            'table': 'table'
        }

        self._type = type
        self._on = on
        self._query = query
        self._table = table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Join':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The join of this Join.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this Join.

        Type of the join operation

        :return: The type of this Join.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Join.

        Type of the join operation

        :param type: The type of this Join.
        :type type: str
        """
        allowed_values = ["inner", "left"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def on(self):
        """Gets the on of this Join.

        List of objects defining joined tables

        :return: The on of this Join.
        :rtype: List[JoinOn]
        """
        return self._on

    @on.setter
    def on(self, on):
        """Sets the on of this Join.

        List of objects defining joined tables

        :param on: The on of this Join.
        :type on: List[JoinOn]
        """
        if on is None:
            raise ValueError("Invalid value for `on`, must not be `None`")

        self._on = on

    @property
    def query(self):
        """Gets the query of this Join.


        :return: The query of this Join.
        :rtype: FulltextFilter
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Join.


        :param query: The query of this Join.
        :type query: FulltextFilter
        """

        self._query = query

    @property
    def table(self):
        """Gets the table of this Join.

        Basic table of the join operation

        :return: The table of this Join.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this Join.

        Basic table of the join operation

        :param table: The table of this Join.
        :type table: str
        """
        if table is None:
            raise ValueError("Invalid value for `table`, must not be `None`")

        self._table = table
