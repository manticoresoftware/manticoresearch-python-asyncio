# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class HitsHits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, score: int=None, source: object=None, knn_dist: float=None, highlight: object=None, table: str=None, type: str=None, fields: object=None):
        """HitsHits - a model defined in OpenAPI

        :param id: The id of this HitsHits.
        :param score: The score of this HitsHits.
        :param source: The source of this HitsHits.
        :param knn_dist: The knn_dist of this HitsHits.
        :param highlight: The highlight of this HitsHits.
        :param table: The table of this HitsHits.
        :param type: The type of this HitsHits.
        :param fields: The fields of this HitsHits.
        """
        self.openapi_types = {
            'id': int,
            'score': int,
            'source': object,
            'knn_dist': float,
            'highlight': object,
            'table': str,
            'type': str,
            'fields': object
        }

        self.attribute_map = {
            'id': '_id',
            'score': '_score',
            'source': '_source',
            'knn_dist': '_knn_dist',
            'highlight': 'highlight',
            'table': 'table',
            'type': '_type:',
            'fields': 'fields'
        }

        self._id = id
        self._score = score
        self._source = source
        self._knn_dist = knn_dist
        self._highlight = highlight
        self._table = table
        self._type = type
        self._fields = fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HitsHits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The hitsHits of this HitsHits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this HitsHits.

        The ID of the matched document

        :return: The id of this HitsHits.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HitsHits.

        The ID of the matched document

        :param id: The id of this HitsHits.
        :type id: int
        """

        self._id = id

    @property
    def score(self):
        """Gets the score of this HitsHits.

        The score of the matched document

        :return: The score of this HitsHits.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this HitsHits.

        The score of the matched document

        :param score: The score of this HitsHits.
        :type score: int
        """

        self._score = score

    @property
    def source(self):
        """Gets the source of this HitsHits.

        The source data of the matched document

        :return: The source of this HitsHits.
        :rtype: object
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this HitsHits.

        The source data of the matched document

        :param source: The source of this HitsHits.
        :type source: object
        """

        self._source = source

    @property
    def knn_dist(self):
        """Gets the knn_dist of this HitsHits.

        The knn distance of the matched document returned for knn queries

        :return: The knn_dist of this HitsHits.
        :rtype: float
        """
        return self._knn_dist

    @knn_dist.setter
    def knn_dist(self, knn_dist):
        """Sets the knn_dist of this HitsHits.

        The knn distance of the matched document returned for knn queries

        :param knn_dist: The knn_dist of this HitsHits.
        :type knn_dist: float
        """

        self._knn_dist = knn_dist

    @property
    def highlight(self):
        """Gets the highlight of this HitsHits.

        The highlighting-related data of the matched document

        :return: The highlight of this HitsHits.
        :rtype: object
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this HitsHits.

        The highlighting-related data of the matched document

        :param highlight: The highlight of this HitsHits.
        :type highlight: object
        """

        self._highlight = highlight

    @property
    def table(self):
        """Gets the table of this HitsHits.

        The table name of the matched document returned for percolate queries

        :return: The table of this HitsHits.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this HitsHits.

        The table name of the matched document returned for percolate queries

        :param table: The table of this HitsHits.
        :type table: str
        """

        self._table = table

    @property
    def type(self):
        """Gets the type of this HitsHits.

        The type of the matched document returned for percolate queries

        :return: The type of this HitsHits.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HitsHits.

        The type of the matched document returned for percolate queries

        :param type: The type of this HitsHits.
        :type type: str
        """

        self._type = type

    @property
    def fields(self):
        """Gets the fields of this HitsHits.

        The percolate-related fields of the matched document returned for percolate queries

        :return: The fields of this HitsHits.
        :rtype: object
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this HitsHits.

        The percolate-related fields of the matched document returned for percolate queries

        :param fields: The fields of this HitsHits.
        :type fields: object
        """

        self._fields = fields
