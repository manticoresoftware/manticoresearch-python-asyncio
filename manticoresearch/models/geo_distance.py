# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class GeoDistance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_anchor: GeoDistanceLocationAnchor=None, location_source: object=None, distance_type: object=None, distance: object=None):
        """GeoDistance - a model defined in OpenAPI

        :param location_anchor: The location_anchor of this GeoDistance.
        :param location_source: The location_source of this GeoDistance.
        :param distance_type: The distance_type of this GeoDistance.
        :param distance: The distance of this GeoDistance.
        """
        self.openapi_types = {
            'location_anchor': GeoDistanceLocationAnchor,
            'location_source': object,
            'distance_type': object,
            'distance': object
        }

        self.attribute_map = {
            'location_anchor': 'location_anchor',
            'location_source': 'location_source',
            'distance_type': 'distance_type',
            'distance': 'distance'
        }

        self._location_anchor = location_anchor
        self._location_source = location_source
        self._distance_type = distance_type
        self._distance = distance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoDistance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The geoDistance of this GeoDistance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_anchor(self):
        """Gets the location_anchor of this GeoDistance.


        :return: The location_anchor of this GeoDistance.
        :rtype: GeoDistanceLocationAnchor
        """
        return self._location_anchor

    @location_anchor.setter
    def location_anchor(self, location_anchor):
        """Sets the location_anchor of this GeoDistance.


        :param location_anchor: The location_anchor of this GeoDistance.
        :type location_anchor: GeoDistanceLocationAnchor
        """

        self._location_anchor = location_anchor

    @property
    def location_source(self):
        """Gets the location_source of this GeoDistance.

        Field name in the document that contains location data

        :return: The location_source of this GeoDistance.
        :rtype: object
        """
        return self._location_source

    @location_source.setter
    def location_source(self, location_source):
        """Sets the location_source of this GeoDistance.

        Field name in the document that contains location data

        :param location_source: The location_source of this GeoDistance.
        :type location_source: object
        """

        self._location_source = location_source

    @property
    def distance_type(self):
        """Gets the distance_type of this GeoDistance.

        Algorithm used to calculate the distance

        :return: The distance_type of this GeoDistance.
        :rtype: object
        """
        return self._distance_type

    @distance_type.setter
    def distance_type(self, distance_type):
        """Sets the distance_type of this GeoDistance.

        Algorithm used to calculate the distance

        :param distance_type: The distance_type of this GeoDistance.
        :type distance_type: object
        """
        allowed_values = [None,adaptive, haversine]  # noqa: E501
        if distance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `distance_type` ({0}), must be one of {1}"
                .format(distance_type, allowed_values)
            )

        self._distance_type = distance_type

    @property
    def distance(self):
        """Gets the distance of this GeoDistance.

        The distance from the anchor point to filter results by

        :return: The distance of this GeoDistance.
        :rtype: object
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this GeoDistance.

        The distance from the anchor point to filter results by

        :param distance: The distance of this GeoDistance.
        :type distance: object
        """
        if distance is not None and not re.search(r'^\.+(km|m|cm|mm|mi|yd|ft|in|NM|nmi|kilometers|meters|centimeters|millimeters|miles|yards|foots|inches|nauticalmiles|)$', distance):
            raise ValueError("Invalid value for `distance`, must be a follow pattern or equal to `/^\.+(km|m|cm|mm|mi|yd|ft|in|NM|nmi|kilometers|meters|centimeters|millimeters|miles|yards|foots|inches|nauticalmiles|)$/`")

        self._distance = distance
