# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class JoinCond(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field: str=None, table: str=None, type: object=None):
        """JoinCond - a model defined in OpenAPI

        :param field: The field of this JoinCond.
        :param table: The table of this JoinCond.
        :param type: The type of this JoinCond.
        """
        self.openapi_types = {
            'field': str,
            'table': str,
            'type': object
        }

        self.attribute_map = {
            'field': 'field',
            'table': 'table',
            'type': 'type'
        }

        self._field = field
        self._table = table
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JoinCond':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The joinCond of this JoinCond.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field(self):
        """Gets the field of this JoinCond.

        Field to join on

        :return: The field of this JoinCond.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this JoinCond.

        Field to join on

        :param field: The field of this JoinCond.
        :type field: str
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")

        self._field = field

    @property
    def table(self):
        """Gets the table of this JoinCond.

        Joined table

        :return: The table of this JoinCond.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this JoinCond.

        Joined table

        :param table: The table of this JoinCond.
        :type table: str
        """
        if table is None:
            raise ValueError("Invalid value for `table`, must not be `None`")

        self._table = table

    @property
    def type(self):
        """Gets the type of this JoinCond.


        :return: The type of this JoinCond.
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JoinCond.


        :param type: The type of this JoinCond.
        :type type: object
        """

        self._type = type
