# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from manticoresearch.models.base_model import Model
from manticoresearch import util


class Highlight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fragment_size: object=None, limit: object=None, limit_snippets: object=None, limit_words: object=None, number_of_fragments: object=None, after_match: str='</strong>', allow_empty: bool=None, around: int=None, before_match: str='<strong>', emit_zones: bool=None, encoder: str=None, fields: object=None, force_all_words: bool=None, force_snippets: bool=None, highlight_query: QueryFilter=None, html_strip_mode: str=None, limits_per_field: bool=None, no_match_size: int=None, order: str=None, pre_tags: str='<strong>', post_tags: str='</strong>', start_snippet_id: int=None, use_boundaries: bool=None):
        """Highlight - a model defined in OpenAPI

        :param fragment_size: The fragment_size of this Highlight.
        :param limit: The limit of this Highlight.
        :param limit_snippets: The limit_snippets of this Highlight.
        :param limit_words: The limit_words of this Highlight.
        :param number_of_fragments: The number_of_fragments of this Highlight.
        :param after_match: The after_match of this Highlight.
        :param allow_empty: The allow_empty of this Highlight.
        :param around: The around of this Highlight.
        :param before_match: The before_match of this Highlight.
        :param emit_zones: The emit_zones of this Highlight.
        :param encoder: The encoder of this Highlight.
        :param fields: The fields of this Highlight.
        :param force_all_words: The force_all_words of this Highlight.
        :param force_snippets: The force_snippets of this Highlight.
        :param highlight_query: The highlight_query of this Highlight.
        :param html_strip_mode: The html_strip_mode of this Highlight.
        :param limits_per_field: The limits_per_field of this Highlight.
        :param no_match_size: The no_match_size of this Highlight.
        :param order: The order of this Highlight.
        :param pre_tags: The pre_tags of this Highlight.
        :param post_tags: The post_tags of this Highlight.
        :param start_snippet_id: The start_snippet_id of this Highlight.
        :param use_boundaries: The use_boundaries of this Highlight.
        """
        self.openapi_types = {
            'fragment_size': object,
            'limit': object,
            'limit_snippets': object,
            'limit_words': object,
            'number_of_fragments': object,
            'after_match': str,
            'allow_empty': bool,
            'around': int,
            'before_match': str,
            'emit_zones': bool,
            'encoder': str,
            'fields': object,
            'force_all_words': bool,
            'force_snippets': bool,
            'highlight_query': QueryFilter,
            'html_strip_mode': str,
            'limits_per_field': bool,
            'no_match_size': int,
            'order': str,
            'pre_tags': str,
            'post_tags': str,
            'start_snippet_id': int,
            'use_boundaries': bool
        }

        self.attribute_map = {
            'fragment_size': 'fragment_size',
            'limit': 'limit',
            'limit_snippets': 'limit_snippets',
            'limit_words': 'limit_words',
            'number_of_fragments': 'number_of_fragments',
            'after_match': 'after_match',
            'allow_empty': 'allow_empty',
            'around': 'around',
            'before_match': 'before_match',
            'emit_zones': 'emit_zones',
            'encoder': 'encoder',
            'fields': 'fields',
            'force_all_words': 'force_all_words',
            'force_snippets': 'force_snippets',
            'highlight_query': 'highlight_query',
            'html_strip_mode': 'html_strip_mode',
            'limits_per_field': 'limits_per_field',
            'no_match_size': 'no_match_size',
            'order': 'order',
            'pre_tags': 'pre_tags',
            'post_tags': 'post_tags',
            'start_snippet_id': 'start_snippet_id',
            'use_boundaries': 'use_boundaries'
        }

        self._fragment_size = fragment_size
        self._limit = limit
        self._limit_snippets = limit_snippets
        self._limit_words = limit_words
        self._number_of_fragments = number_of_fragments
        self._after_match = after_match
        self._allow_empty = allow_empty
        self._around = around
        self._before_match = before_match
        self._emit_zones = emit_zones
        self._encoder = encoder
        self._fields = fields
        self._force_all_words = force_all_words
        self._force_snippets = force_snippets
        self._highlight_query = highlight_query
        self._html_strip_mode = html_strip_mode
        self._limits_per_field = limits_per_field
        self._no_match_size = no_match_size
        self._order = order
        self._pre_tags = pre_tags
        self._post_tags = post_tags
        self._start_snippet_id = start_snippet_id
        self._use_boundaries = use_boundaries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Highlight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The highlight of this Highlight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fragment_size(self):
        """Gets the fragment_size of this Highlight.

        Maximum size of the text fragments in highlighted snippets per field

        :return: The fragment_size of this Highlight.
        :rtype: object
        """
        return self._fragment_size

    @fragment_size.setter
    def fragment_size(self, fragment_size):
        """Sets the fragment_size of this Highlight.

        Maximum size of the text fragments in highlighted snippets per field

        :param fragment_size: The fragment_size of this Highlight.
        :type fragment_size: object
        """

        self._fragment_size = fragment_size

    @property
    def limit(self):
        """Gets the limit of this Highlight.

        Maximum size of snippets per field

        :return: The limit of this Highlight.
        :rtype: object
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Highlight.

        Maximum size of snippets per field

        :param limit: The limit of this Highlight.
        :type limit: object
        """

        self._limit = limit

    @property
    def limit_snippets(self):
        """Gets the limit_snippets of this Highlight.

        Maximum number of snippets per field

        :return: The limit_snippets of this Highlight.
        :rtype: object
        """
        return self._limit_snippets

    @limit_snippets.setter
    def limit_snippets(self, limit_snippets):
        """Sets the limit_snippets of this Highlight.

        Maximum number of snippets per field

        :param limit_snippets: The limit_snippets of this Highlight.
        :type limit_snippets: object
        """

        self._limit_snippets = limit_snippets

    @property
    def limit_words(self):
        """Gets the limit_words of this Highlight.

        Maximum number of words per field

        :return: The limit_words of this Highlight.
        :rtype: object
        """
        return self._limit_words

    @limit_words.setter
    def limit_words(self, limit_words):
        """Sets the limit_words of this Highlight.

        Maximum number of words per field

        :param limit_words: The limit_words of this Highlight.
        :type limit_words: object
        """

        self._limit_words = limit_words

    @property
    def number_of_fragments(self):
        """Gets the number_of_fragments of this Highlight.

        Total number of highlighted fragments per field

        :return: The number_of_fragments of this Highlight.
        :rtype: object
        """
        return self._number_of_fragments

    @number_of_fragments.setter
    def number_of_fragments(self, number_of_fragments):
        """Sets the number_of_fragments of this Highlight.

        Total number of highlighted fragments per field

        :param number_of_fragments: The number_of_fragments of this Highlight.
        :type number_of_fragments: object
        """

        self._number_of_fragments = number_of_fragments

    @property
    def after_match(self):
        """Gets the after_match of this Highlight.

        Text inserted after the matched term, typically used for HTML formatting

        :return: The after_match of this Highlight.
        :rtype: str
        """
        return self._after_match

    @after_match.setter
    def after_match(self, after_match):
        """Sets the after_match of this Highlight.

        Text inserted after the matched term, typically used for HTML formatting

        :param after_match: The after_match of this Highlight.
        :type after_match: str
        """

        self._after_match = after_match

    @property
    def allow_empty(self):
        """Gets the allow_empty of this Highlight.

        Permits an empty string to be returned as the highlighting result. Otherwise, the beginning of the original text would be returned

        :return: The allow_empty of this Highlight.
        :rtype: bool
        """
        return self._allow_empty

    @allow_empty.setter
    def allow_empty(self, allow_empty):
        """Sets the allow_empty of this Highlight.

        Permits an empty string to be returned as the highlighting result. Otherwise, the beginning of the original text would be returned

        :param allow_empty: The allow_empty of this Highlight.
        :type allow_empty: bool
        """

        self._allow_empty = allow_empty

    @property
    def around(self):
        """Gets the around of this Highlight.

        Number of words around the match to include in the highlight

        :return: The around of this Highlight.
        :rtype: int
        """
        return self._around

    @around.setter
    def around(self, around):
        """Sets the around of this Highlight.

        Number of words around the match to include in the highlight

        :param around: The around of this Highlight.
        :type around: int
        """

        self._around = around

    @property
    def before_match(self):
        """Gets the before_match of this Highlight.

        Text inserted before the match, typically used for HTML formatting

        :return: The before_match of this Highlight.
        :rtype: str
        """
        return self._before_match

    @before_match.setter
    def before_match(self, before_match):
        """Sets the before_match of this Highlight.

        Text inserted before the match, typically used for HTML formatting

        :param before_match: The before_match of this Highlight.
        :type before_match: str
        """

        self._before_match = before_match

    @property
    def emit_zones(self):
        """Gets the emit_zones of this Highlight.

        Emits an HTML tag with the enclosing zone name before each highlighted snippet

        :return: The emit_zones of this Highlight.
        :rtype: bool
        """
        return self._emit_zones

    @emit_zones.setter
    def emit_zones(self, emit_zones):
        """Sets the emit_zones of this Highlight.

        Emits an HTML tag with the enclosing zone name before each highlighted snippet

        :param emit_zones: The emit_zones of this Highlight.
        :type emit_zones: bool
        """

        self._emit_zones = emit_zones

    @property
    def encoder(self):
        """Gets the encoder of this Highlight.

        If set to 'html', retains HTML markup when highlighting

        :return: The encoder of this Highlight.
        :rtype: str
        """
        return self._encoder

    @encoder.setter
    def encoder(self, encoder):
        """Sets the encoder of this Highlight.

        If set to 'html', retains HTML markup when highlighting

        :param encoder: The encoder of this Highlight.
        :type encoder: str
        """
        allowed_values = ["default", "html"]  # noqa: E501
        if encoder not in allowed_values:
            raise ValueError(
                "Invalid value for `encoder` ({0}), must be one of {1}"
                .format(encoder, allowed_values)
            )

        self._encoder = encoder

    @property
    def fields(self):
        """Gets the fields of this Highlight.


        :return: The fields of this Highlight.
        :rtype: object
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Highlight.


        :param fields: The fields of this Highlight.
        :type fields: object
        """

        self._fields = fields

    @property
    def force_all_words(self):
        """Gets the force_all_words of this Highlight.

        Ignores the length limit until the result includes all keywords

        :return: The force_all_words of this Highlight.
        :rtype: bool
        """
        return self._force_all_words

    @force_all_words.setter
    def force_all_words(self, force_all_words):
        """Sets the force_all_words of this Highlight.

        Ignores the length limit until the result includes all keywords

        :param force_all_words: The force_all_words of this Highlight.
        :type force_all_words: bool
        """

        self._force_all_words = force_all_words

    @property
    def force_snippets(self):
        """Gets the force_snippets of this Highlight.

        Forces snippet generation even if limits allow highlighting the entire text

        :return: The force_snippets of this Highlight.
        :rtype: bool
        """
        return self._force_snippets

    @force_snippets.setter
    def force_snippets(self, force_snippets):
        """Sets the force_snippets of this Highlight.

        Forces snippet generation even if limits allow highlighting the entire text

        :param force_snippets: The force_snippets of this Highlight.
        :type force_snippets: bool
        """

        self._force_snippets = force_snippets

    @property
    def highlight_query(self):
        """Gets the highlight_query of this Highlight.


        :return: The highlight_query of this Highlight.
        :rtype: QueryFilter
        """
        return self._highlight_query

    @highlight_query.setter
    def highlight_query(self, highlight_query):
        """Sets the highlight_query of this Highlight.


        :param highlight_query: The highlight_query of this Highlight.
        :type highlight_query: QueryFilter
        """

        self._highlight_query = highlight_query

    @property
    def html_strip_mode(self):
        """Gets the html_strip_mode of this Highlight.

        Defines the mode for handling HTML markup in the highlight

        :return: The html_strip_mode of this Highlight.
        :rtype: str
        """
        return self._html_strip_mode

    @html_strip_mode.setter
    def html_strip_mode(self, html_strip_mode):
        """Sets the html_strip_mode of this Highlight.

        Defines the mode for handling HTML markup in the highlight

        :param html_strip_mode: The html_strip_mode of this Highlight.
        :type html_strip_mode: str
        """
        allowed_values = ["none", "strip", "index", "retain"]  # noqa: E501
        if html_strip_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `html_strip_mode` ({0}), must be one of {1}"
                .format(html_strip_mode, allowed_values)
            )

        self._html_strip_mode = html_strip_mode

    @property
    def limits_per_field(self):
        """Gets the limits_per_field of this Highlight.

        Determines whether the 'limit', 'limit_words', and 'limit_snippets' options operate as individual limits in each field of the document

        :return: The limits_per_field of this Highlight.
        :rtype: bool
        """
        return self._limits_per_field

    @limits_per_field.setter
    def limits_per_field(self, limits_per_field):
        """Sets the limits_per_field of this Highlight.

        Determines whether the 'limit', 'limit_words', and 'limit_snippets' options operate as individual limits in each field of the document

        :param limits_per_field: The limits_per_field of this Highlight.
        :type limits_per_field: bool
        """

        self._limits_per_field = limits_per_field

    @property
    def no_match_size(self):
        """Gets the no_match_size of this Highlight.

        If set to 1, allows an empty string to be returned as a highlighting result

        :return: The no_match_size of this Highlight.
        :rtype: int
        """
        return self._no_match_size

    @no_match_size.setter
    def no_match_size(self, no_match_size):
        """Sets the no_match_size of this Highlight.

        If set to 1, allows an empty string to be returned as a highlighting result

        :param no_match_size: The no_match_size of this Highlight.
        :type no_match_size: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if no_match_size not in allowed_values:
            raise ValueError(
                "Invalid value for `no_match_size` ({0}), must be one of {1}"
                .format(no_match_size, allowed_values)
            )

        self._no_match_size = no_match_size

    @property
    def order(self):
        """Gets the order of this Highlight.

        Sets the sorting order of highlighted snippets

        :return: The order of this Highlight.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Highlight.

        Sets the sorting order of highlighted snippets

        :param order: The order of this Highlight.
        :type order: str
        """
        allowed_values = ["asc", "desc", "score"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def pre_tags(self):
        """Gets the pre_tags of this Highlight.

        Text inserted before each highlighted snippet

        :return: The pre_tags of this Highlight.
        :rtype: str
        """
        return self._pre_tags

    @pre_tags.setter
    def pre_tags(self, pre_tags):
        """Sets the pre_tags of this Highlight.

        Text inserted before each highlighted snippet

        :param pre_tags: The pre_tags of this Highlight.
        :type pre_tags: str
        """

        self._pre_tags = pre_tags

    @property
    def post_tags(self):
        """Gets the post_tags of this Highlight.

        Text inserted after each highlighted snippet

        :return: The post_tags of this Highlight.
        :rtype: str
        """
        return self._post_tags

    @post_tags.setter
    def post_tags(self, post_tags):
        """Sets the post_tags of this Highlight.

        Text inserted after each highlighted snippet

        :param post_tags: The post_tags of this Highlight.
        :type post_tags: str
        """

        self._post_tags = post_tags

    @property
    def start_snippet_id(self):
        """Gets the start_snippet_id of this Highlight.

        Sets the starting value of the %SNIPPET_ID% macro

        :return: The start_snippet_id of this Highlight.
        :rtype: int
        """
        return self._start_snippet_id

    @start_snippet_id.setter
    def start_snippet_id(self, start_snippet_id):
        """Sets the start_snippet_id of this Highlight.

        Sets the starting value of the %SNIPPET_ID% macro

        :param start_snippet_id: The start_snippet_id of this Highlight.
        :type start_snippet_id: int
        """

        self._start_snippet_id = start_snippet_id

    @property
    def use_boundaries(self):
        """Gets the use_boundaries of this Highlight.

        Defines whether to additionally break snippets by phrase boundary characters

        :return: The use_boundaries of this Highlight.
        :rtype: bool
        """
        return self._use_boundaries

    @use_boundaries.setter
    def use_boundaries(self, use_boundaries):
        """Sets the use_boundaries of this Highlight.

        Defines whether to additionally break snippets by phrase boundary characters

        :param use_boundaries: The use_boundaries of this Highlight.
        :type use_boundaries: bool
        """

        self._use_boundaries = use_boundaries
